from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, InputFile,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ContentType, MessageEntity
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot.config import load_config
from bot.database import db
import logging
from typing import List

logging.basicConfig(level=logging.DEBUG)

router = Router()
config = load_config()


class BroadcastStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_media = State()
    waiting_for_button = State()
    preview = State()


@router.message(Command("broadcast"))
async def cmd_broadcast_start(message: Message, state: FSMContext):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ /broadcast –ø–æ–ª—É—á–µ–Ω–∞")
    if message.from_user.id not in config.admins:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    await state.clear()
    await message.answer(
        "üì¢ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º ‚Äî —Å–ø–æ–π–ª–µ—Ä—ã, –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Ç.–ø.).\n\n"
        "–ò–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
    )
    await state.set_state(BroadcastStates.waiting_for_text)


@router.message(BroadcastStates.waiting_for_text, F.content_type == ContentType.TEXT)
async def process_text_step(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –∏ message_id –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
    await state.update_data(source_chat_id=message.chat.id, source_message_id=message.message_id)
    await message.answer(
        "–®–∞–≥ 2: –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ ¬´–∫—Ä—É–∂–æ–∫¬ª(video_note), –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
    )
    await state.set_state(BroadcastStates.waiting_for_media)


@router.message(BroadcastStates.waiting_for_text, Command("skip"))
async def skip_text_step(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫—É
    await state.update_data(source_chat_id=None, source_message_id=None)
    await message.answer(
        "–®–∞–≥ 2: –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ ¬´–∫—Ä—É–∂–æ–∫¬ª(video_note), –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
    )
    await state.set_state(BroadcastStates.waiting_for_media)


@router.message(
    BroadcastStates.waiting_for_media,
    F.content_type.in_({ContentType.PHOTO, ContentType.VIDEO_NOTE})
)
async def process_media_step(message: Message, state: FSMContext):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(media_source_chat_id=message.chat.id, media_source_message_id=message.message_id)
    await message.answer(
        "–®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ / URL —Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ / –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞: www.domain.com, t.me/—Å—Å—ã–ª–∫–∞_–∏–ª–∏_–∏–∑–µ—Ä–Ω–∞–µ–π–º\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞."
    )
    await state.set_state(BroadcastStates.waiting_for_button)


@router.message(BroadcastStates.waiting_for_media, Command("skip"))
async def skip_media_step(message: Message, state: FSMContext):
    await state.update_data(media_source_chat_id=None, media_source_message_id=None)
    await message.answer(
        "–®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ / URL —Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ / –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ —Ç–∏–ø–∞: www.domain.com, t.me/—Å—Å—ã–ª–∫–∞_–∏–ª–∏_–∏–∑–µ—Ä–Ω–∞–µ–π–º\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞."
    )
    await state.set_state(BroadcastStates.waiting_for_button)


@router.message(BroadcastStates.waiting_for_button)
async def process_button_step(message: Message, state: FSMContext):
    text = message.text or ""
    if text.lower() == "/skip":
        await state.update_data(button=None)
        await send_preview(message, state)
        return

    if "/" not in text:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ / –°—Å—ã–ª–∫–∞")
        return

    btn_text, btn_url = map(str.strip, text.split("/", 1))

    # –ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ https:// –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å www. –∏–ª–∏ t.me/
    if not btn_url.startswith(("http://", "https://")):
        if btn_url.startswith(("www.", "t.me/")):
            btn_url = "https://" + btn_url
        else:
            await message.answer("‚ùó –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http://, https://, www. –∏–ª–∏ t.me/")
            return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=btn_text, url=btn_url)]
    ])

    await state.update_data(button=keyboard)
    await send_preview(message, state)


async def send_preview(message: Message, state: FSMContext):
    data = await state.get_data()

    source_chat_id = data.get("source_chat_id")
    source_message_id = data.get("source_message_id")
    media_source_chat_id = data.get("media_source_chat_id")
    media_source_message_id = data.get("media_source_message_id")
    button = data.get("button")

    await message.answer("üì® –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:")

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —Ç–µ–∫—Å—Ç, –∏ –º–µ–¥–∏–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        if media_source_chat_id and media_source_message_id:
            # –ö–æ–ø–∏—Ä—É–µ–º –º–µ–¥–∏–∞
            await message.bot.copy_message(
                chat_id=message.chat.id,
                from_chat_id=media_source_chat_id,
                message_id=media_source_message_id
            )
            # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
            if source_chat_id and source_message_id:
                await message.bot.copy_message(
                    chat_id=message.chat.id,
                    from_chat_id=source_chat_id,
                    message_id=source_message_id,
                    reply_markup=button
                )
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∫ –º–µ–¥–∏–∞
                if button:
                    await message.answer(" ", reply_markup=button)
        else:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            if source_chat_id and source_message_id:
                await message.bot.copy_message(
                    chat_id=message.chat.id,
                    from_chat_id=source_chat_id,
                    message_id=source_message_id,
                    reply_markup=button
                )
            else:
                await message.answer("‚ùó –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")

    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        return

    await message.answer(
        "–ï—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /send –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(BroadcastStates.preview)


@router.message(BroadcastStates.preview, Command("send"))
async def process_send(message: Message, state: FSMContext):
    if message.from_user.id not in config.admins:
        return

    data = await state.get_data()

    source_chat_id = data.get("source_chat_id")
    source_message_id = data.get("source_message_id")
    media_source_chat_id = data.get("media_source_chat_id")
    media_source_message_id = data.get("media_source_message_id")
    button = data.get("button")

    users = await get_all_users()

    sent = 0
    failed = 0

    await message.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    for user_id in users:
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞ ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
            if media_source_chat_id and media_source_message_id:
                await message.bot.copy_message(
                    chat_id=user_id,
                    from_chat_id=media_source_chat_id,
                    message_id=media_source_message_id
                )
                if source_chat_id and source_message_id:
                    await message.bot.copy_message(
                        chat_id=user_id,
                        from_chat_id=source_chat_id,
                        message_id=source_message_id,
                        reply_markup=button
                    )
                else:
                    if button:
                        await message.bot.send_message(chat_id=user_id, text=" ", reply_markup=button)
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–∏–ª–∏ –ø—É—Å—Ç–æ)
                if source_chat_id and source_message_id:
                    await message.bot.copy_message(
                        chat_id=user_id,
                        from_chat_id=source_chat_id,
                        message_id=source_message_id,
                        reply_markup=button
                    )
                else:
                    if button:
                        await message.bot.send_message(chat_id=user_id, text=" ", reply_markup=button)

            sent += 1
        except Exception:
            failed += 1

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}, –û—à–∏–±–æ–∫: {failed}")
    await state.clear()


@router.message(BroadcastStates.preview, Command("cancel"))
async def cancel_broadcast(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


async def get_all_users() -> List[int]:
    users = []
    rows = await db.get_all_users()  # –ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å user_id
    for row in rows:
        users.append(row[0])
    return users
